from tasks.task_manager import TaskManager
from agents.worker_factory import WorkerFactory

class TaskCoordinator:
    def __init__(self, agents):
        """
        Initialize the TaskCoordinator with a dictionary of agents.
        :param agents: A dictionary where keys are role names and values are agent instances.
        """
        self.agents = agents

    def execute(self):
        """
        Orchestrates the execution of tasks by the agents.
        :return: The final output after all agents have performed their tasks.
        """
        research = ""
        draft = ""
        final_output = ""

        # Researcher performs the research task if the role exists
        if 'Researcher' in self.agents:
            research = self.agents['Researcher'].perform_task()

        # Writer performs the writing task if the role exists, using the research data
        if 'Writer' in self.agents:
            draft = self.agents['Writer'].perform_task(research)
        else:
            draft = research  # If no writer, use research as draft

        # Editor performs the editing task if the role exists, using the draft
        if 'Editor' in self.agents:
            final_output = self.agents['Editor'].perform_task(draft)
        else:
            final_output = draft  # If no editor, use draft as final output

        return final_output

if __name__ == "__main__":
    # Prompt the user to input a task description
    task_description = input("Enter a task description: ")

    # Create an instance of TaskManager to parse the task description and identify required roles
    task_manager = TaskManager()
    roles = task_manager.parse_task(task_description)

    # Initialize the WorkerFactory to create agents dynamically based on the identified roles
    factory = WorkerFactory()
    agents = {role: factory.create_worker(role) for role in roles}

    # Create a TaskCoordinator with the created agents and execute the task
    coordinator = TaskCoordinator(agents)
    final_output = coordinator.execute()

    # Print the final output generated by the agents
    print(final_output)
